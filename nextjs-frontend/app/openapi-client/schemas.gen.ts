// This file is auto-generated by @hey-api/openapi-ts

export const BearerResponseSchema = {
  properties: {
    access_token: {
      type: "string",
      title: "Access Token",
    },
    token_type: {
      type: "string",
      title: "Token Type",
    },
  },
  type: "object",
  required: ["access_token", "token_type"],
  title: "BearerResponse",
} as const;

export const Body_auth_reset_forgot_passwordSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
  },
  type: "object",
  required: ["email"],
  title: "Body_auth-reset:forgot_password",
} as const;

export const Body_auth_reset_reset_passwordSchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
    password: {
      type: "string",
      title: "Password",
    },
  },
  type: "object",
  required: ["token", "password"],
  title: "Body_auth-reset:reset_password",
} as const;

export const Body_auth_verify_request_tokenSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
  },
  type: "object",
  required: ["email"],
  title: "Body_auth-verify:request-token",
} as const;

export const Body_auth_verify_verifySchema = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
  },
  type: "object",
  required: ["token"],
  title: "Body_auth-verify:verify",
} as const;

export const ErrorModelSchema = {
  properties: {
    detail: {
      anyOf: [
        {
          type: "string",
        },
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
        },
      ],
      title: "Detail",
    },
  },
  type: "object",
  required: ["detail"],
  title: "ErrorModel",
} as const;

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const;

export const HelloRequestSchema = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
  },
  type: "object",
  required: ["name"],
  title: "HelloRequest",
} as const;

export const UserCreateSchema = {
  properties: {
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
    password: {
      type: "string",
      title: "Password",
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      default: true,
    },
    is_superuser: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Superuser",
      default: false,
    },
    is_verified: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Verified",
      default: false,
    },
  },
  type: "object",
  required: ["email", "password"],
  title: "UserCreate",
} as const;

export const UserReadSchema = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      default: true,
    },
    is_superuser: {
      type: "boolean",
      title: "Is Superuser",
      default: false,
    },
    is_verified: {
      type: "boolean",
      title: "Is Verified",
      default: false,
    },
  },
  type: "object",
  required: ["id", "email"],
  title: "UserRead",
} as const;

export const UserUpdateSchema = {
  properties: {
    password: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Password",
    },
    email: {
      anyOf: [
        {
          type: "string",
          format: "email",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
    },
    is_superuser: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Superuser",
    },
    is_verified: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Verified",
    },
  },
  type: "object",
  title: "UserUpdate",
} as const;

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const;

export const loginSchema = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: "string",
          pattern: "password",
        },
        {
          type: "null",
        },
      ],
      title: "Grant Type",
    },
    username: {
      type: "string",
      title: "Username",
    },
    password: {
      type: "string",
      title: "Password",
    },
    scope: {
      type: "string",
      title: "Scope",
      default: "",
    },
    client_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Id",
    },
    client_secret: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Secret",
    },
  },
  type: "object",
  required: ["username", "password"],
  title: "Body_auth-auth:jwt.login",
} as const;
